{"ast":null,"code":"var _jsxFileName = \"/Users/bluestacks/Projects/fdc-master/src/components/main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Nav from './Nav';\nimport Row from './row';\nimport { GetTimeDiff } from '../time';\nimport { db } from '../firebase-config';\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ClickableContext = /*#__PURE__*/React.createContext();\n\nfunction Main() {\n  _s();\n\n  const [campaigns, setCampaigns] = useState([]); //Upcoming Campaign is Represented by 1 \n  //Live Campaign is represented by 0 \n  //Past Campaign is represented by -1 \n  //Initialy Campaign is set to 1  \n\n  const [campaignType, setCampaignType] = useState(1); //This is to check if campaign date is changed \n\n  const [dataChanged, setDataChanged] = useState(false);\n  const campaignsCollectionRef = collection(db, \"campaigns\");\n  useEffect(() => {\n    const getCampaigns = async () => {\n      const data = await getDocs(campaignsCollectionRef);\n      setCampaigns(data.docs.map(doc => ({ ...doc.data(),\n        id: doc.id\n      })));\n    };\n\n    getCampaigns();\n  }, [dataChanged]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      handleCampaignType: setCampaignType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"main\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: campaigns.map(item => {\n          if (compareParity(GetTimeDiff(new Date(item.createdOn), new Date()), campaignType)) {\n            return /*#__PURE__*/_jsxDEV(Row, {\n              data: item,\n              dataChanged: dataChanged,\n              setDataChanged: setDataChanged\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 36\n            }, this);\n          }\n\n          return null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Main, \"53KFbEReFu7min5/24UR26SN91M=\");\n\n_c = Main;\n\nfunction compareParity(first, second) {\n  if (first === 0 && second === 0) return true;\n  if (first === 0) return false;\n  if (second === 0) return false;\n  var firstParity = first / Math.abs(first);\n  var secondParity = second / Math.abs(second);\n  if (firstParity === secondParity) return true;\n  return false;\n}\n\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/bluestacks/Projects/fdc-master/src/components/main.js"],"names":["React","useEffect","useState","Nav","Row","GetTimeDiff","db","collection","getDocs","ClickableContext","createContext","Main","campaigns","setCampaigns","campaignType","setCampaignType","dataChanged","setDataChanged","campaignsCollectionRef","getCampaigns","data","docs","map","doc","id","item","compareParity","Date","createdOn","first","second","firstParity","Math","abs","secondParity"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAAQC,WAAR,QAA0B,SAA1B;AACA,SAAQC,EAAR,QAAiB,oBAAjB;AACA,SAAQC,UAAR,EAAqBC,OAArB,QAAmC,oBAAnC;;AAEA,OAAO,MAAMC,gBAAgB,gBAAGT,KAAK,CAACU,aAAN,EAAzB;;AAEP,SAASC,IAAT,GAAe;AAAA;;AACX,QAAM,CAACC,SAAD,EAAaC,YAAb,IAA6BX,QAAQ,CAAC,EAAD,CAA3C,CADW,CAEX;AACA;AACA;AACA;;AACA,QAAK,CAACY,YAAD,EAAgBC,eAAhB,IAAmCb,QAAQ,CAAC,CAAD,CAAhD,CANW,CAQX;;AACA,QAAK,CAACc,WAAD,EAAeC,cAAf,IAAiCf,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMgB,sBAAsB,GAAGX,UAAU,CAACD,EAAD,EAAM,WAAN,CAAzC;AAEAL,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMkB,YAAY,GAAG,YAAU;AAC3B,YAAMC,IAAI,GAAG,MAAMZ,OAAO,CAACU,sBAAD,CAA1B;AACAL,MAAAA,YAAY,CAACO,IAAI,CAACC,IAAL,CAAUC,GAAV,CAAeC,GAAD,KAAQ,EAAC,GAAGA,GAAG,CAACH,IAAJ,EAAJ;AAAiBI,QAAAA,EAAE,EAAED,GAAG,CAACC;AAAzB,OAAR,CAAd,CAAD,CAAZ;AACH,KAHD;;AAIAL,IAAAA,YAAY;AACf,GANQ,EAMN,CAACH,WAAD,CANM,CAAT;AAQA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI,QAAC,GAAD;AAAK,MAAA,kBAAkB,EAAID;AAA3B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,SAAS,EAAC,MAAjB;AAAA,6BACI;AAAA,kBAEIH,SAAS,CAACU,GAAV,CAAcG,IAAI,IAAE;AAChB,cAAGC,aAAa,CAACrB,WAAW,CAAC,IAAIsB,IAAJ,CAASF,IAAI,CAACG,SAAd,CAAD,EAA4B,IAAID,IAAJ,EAA5B,CAAZ,EAAqDb,YAArD,CAAhB,EAAmF;AAC/E,gCAAO,QAAC,GAAD;AAAmB,cAAA,IAAI,EAAGW,IAA1B;AAAgC,cAAA,WAAW,EAAGT,WAA9C;AAA2D,cAAA,cAAc,EAAEC;AAA3E,eAAUQ,IAAI,CAACD,EAAf;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH;;AACD,iBAAO,IAAP;AACH,SALD;AAFJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GAxCQb,I;;KAAAA,I;;AA0CT,SAASe,aAAT,CAAuBG,KAAvB,EAA+BC,MAA/B,EAAsC;AAClC,MAAGD,KAAK,KAAK,CAAV,IAAeC,MAAM,KAAI,CAA5B,EAA+B,OAAO,IAAP;AAC/B,MAAGD,KAAK,KAAK,CAAb,EAAgB,OAAO,KAAP;AAChB,MAAGC,MAAM,KAAK,CAAd,EAAiB,OAAO,KAAP;AAEjB,MAAIC,WAAW,GAAGF,KAAK,GAACG,IAAI,CAACC,GAAL,CAASJ,KAAT,CAAxB;AACA,MAAIK,YAAY,GAAGJ,MAAM,GAACE,IAAI,CAACC,GAAL,CAASH,MAAT,CAA1B;AACA,MAAGC,WAAW,KAAKG,YAAnB,EAAiC,OAAO,IAAP;AACjC,SAAO,KAAP;AACH;;AAED,eAAevB,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Nav from './Nav'\nimport Row from './row'\nimport {GetTimeDiff} from '../time'\nimport {db} from '../firebase-config'\nimport {collection , getDocs} from \"firebase/firestore\"\n\nexport const ClickableContext = React.createContext() ; \n\nfunction Main(){\n    const [campaigns , setCampaigns] = useState([]) ;\n    //Upcoming Campaign is Represented by 1 \n    //Live Campaign is represented by 0 \n    //Past Campaign is represented by -1 \n    //Initialy Campaign is set to 1  \n    const[campaignType , setCampaignType] = useState(1) ; \n\n    //This is to check if campaign date is changed \n    const[dataChanged , setDataChanged] = useState(false) ; \n\n    const campaignsCollectionRef = collection(db , \"campaigns\") ;\n    \n    useEffect(()=>{\n        const getCampaigns = async() =>{\n            const data = await getDocs(campaignsCollectionRef) ; \n            setCampaigns(data.docs.map((doc)=>({...doc.data() , id :doc.id}))) ; \n        }\n        getCampaigns() ; \n    } ,[dataChanged])\n\n    return(\n        <div className=\"container\">\n            <Nav handleCampaignType = {setCampaignType}/>\n            <table className=\"main\">\n                <tbody>\n                {\n                    campaigns.map(item=>{\n                        if(compareParity(GetTimeDiff(new Date(item.createdOn) , new Date()), campaignType)){\n                            return <Row key={item.id} data= {item} dataChanged= {dataChanged} setDataChanged={setDataChanged}></Row>\n                        }\n                        return null ;\n                    })\n                }\n                </tbody>\n            </table>\n        </div>\n    \n        \n    )\n}\n\nfunction compareParity(first , second){\n    if(first === 0 && second ===0) return true ; \n    if(first === 0) return false ; \n    if(second === 0) return false ;\n\n    var firstParity = first/Math.abs(first) ; \n    var secondParity = second/Math.abs(second) ; \n    if(firstParity === secondParity) return true ; \n    return false ;\n}\n\nexport default Main ;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/bluestacks/Projects/fdc-master/src/components/main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Nav from './Nav';\nimport Row from './row';\nimport { GetTimeDiff } from '../time';\nimport { db } from '../firebase-config';\nimport { collection, getDocs } from \"firebase/firestore\";\nimport './Main.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ClickableContext = /*#__PURE__*/React.createContext();\n\nfunction Main() {\n  _s();\n\n  const [clickable, setClickable] = useState(true);\n  const [campaigns, setCampaigns] = useState([]); //Upcoming Campaign is Represented by 1 \n  //Live Campaign is represented by 0 \n  //Past Campaign is represented by -1 \n  //Initialy Campaign is set to 1  \n\n  const [campaignType, setCampaignType] = useState(1); //This is to check if campaign date is changed \n\n  const [dataChanged, setDataChanged] = useState(false);\n  const campaignsCollectionRef = collection(db, \"campaigns\");\n  useEffect(() => {\n    const getCampaigns = async () => {\n      const data = await getDocs(campaignsCollectionRef);\n      setCampaigns(data.docs.map(doc => ({ ...doc.data(),\n        id: doc.id\n      })));\n    };\n\n    getCampaigns();\n  }, [dataChanged]);\n  return /*#__PURE__*/_jsxDEV(ClickableContext.Provider, {\n    value: setClickable,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: clickable ? \"container\" : \"non-clickable-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Manage Campaigns\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Nav, {\n        handleCampaignType: setCampaignType,\n        handleDataChanged: () => {\n          setDataChanged(!dataChanged);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"main\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"col\",\n              children: \"DATE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"col\",\n              children: \"CAMPAIGN\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"col\",\n              children: \"VIEW\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"col\",\n              children: \"ACTIONS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: campaigns.map(item => {\n            if (compareParity(GetTimeDiff(new Date(item.createdOn), new Date()), campaignType)) {\n              return /*#__PURE__*/_jsxDEV(Row, {\n                data: item,\n                dataChanged: dataChanged,\n                setDataChanged: setDataChanged\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 40\n              }, this);\n            }\n\n            return null;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Main, \"YZm4/rX0txmT96sV6lE9Ppuihfc=\");\n\n_c = Main;\n\nfunction compareParity(first, second) {\n  if (first === 0 && second === 0) return true;\n  if (first === 0) return false;\n  if (second === 0) return false;\n  var firstParity = first / Math.abs(first);\n  var secondParity = second / Math.abs(second);\n  if (firstParity === secondParity) return true;\n  return false;\n}\n\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/bluestacks/Projects/fdc-master/src/components/main.js"],"names":["React","useEffect","useState","Nav","Row","GetTimeDiff","db","collection","getDocs","ClickableContext","createContext","Main","clickable","setClickable","campaigns","setCampaigns","campaignType","setCampaignType","dataChanged","setDataChanged","campaignsCollectionRef","getCampaigns","data","docs","map","doc","id","item","compareParity","Date","createdOn","first","second","firstParity","Math","abs","secondParity"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Nav from './Nav'\nimport Row from './row'\nimport {GetTimeDiff} from '../time'\nimport {db} from '../firebase-config'\nimport {collection , getDocs} from \"firebase/firestore\"\n\nimport './Main.css'\n\nexport const ClickableContext = React.createContext() ; \n\nfunction Main(){\n\n    const [clickable , setClickable] = useState(true) ;\n    const [campaigns , setCampaigns] = useState([]) ;\n    //Upcoming Campaign is Represented by 1 \n    //Live Campaign is represented by 0 \n    //Past Campaign is represented by -1 \n    //Initialy Campaign is set to 1  \n    const[campaignType , setCampaignType] = useState(1) ; \n\n    //This is to check if campaign date is changed \n    const[dataChanged , setDataChanged] = useState(false) ; \n\n    const campaignsCollectionRef = collection(db , \"campaigns\") ;\n    \n    useEffect(()=>{\n        const getCampaigns = async() =>{\n            const data = await getDocs(campaignsCollectionRef) ; \n            setCampaigns(data.docs.map((doc)=>({...doc.data() , id :doc.id}))) ; \n        }\n        getCampaigns() ; \n    } ,[dataChanged])\n\n    return(\n        <ClickableContext.Provider value={setClickable}>\n            <div className={clickable?\"container\":\"non-clickable-container\"}>\n                <header >\n                   <p>Manage Campaigns</p> \n                </header>\n                <Nav handleCampaignType = {setCampaignType} handleDataChanged={()=>{setDataChanged(!dataChanged)}}/>\n                <table className=\"main\">\n                    <thead>\n                        <tr>\n                            <th className='col'>DATE</th>\n                            <th className='col'>CAMPAIGN</th>\n                            <th className='col'>VIEW</th>\n                            <th className='col'>ACTIONS</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        campaigns.map(item=>{\n                            if(compareParity(GetTimeDiff(new Date(item.createdOn) , new Date()), campaignType)){\n                                return <Row key={item.id} data= {item} dataChanged= {dataChanged} setDataChanged={setDataChanged}></Row>\n                            }\n                            return null ;\n                        })\n                    }\n                    </tbody>\n                </table>\n            </div>\n        </ClickableContext.Provider>\n\n    \n        \n    )\n}\n\nfunction compareParity(first , second){\n    if(first === 0 && second ===0) return true ; \n    if(first === 0) return false ; \n    if(second === 0) return false ;\n\n    var firstParity = first/Math.abs(first) ; \n    var secondParity = second/Math.abs(second) ; \n    if(firstParity === secondParity) return true ; \n    return false ;\n}\n\nexport default Main ;"]},"metadata":{},"sourceType":"module"}